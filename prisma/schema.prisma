datasource db {
  provider = "postgresql"
  url      = "postgresql://johndoe:mypassword@localhost:5432/mydb?schema=public"
}

generator nestjsDto {
  provider                        = "node -r ts-node/register/transpile-only src/cli.ts"
  output                          = "../src/@generated/prisma-generator-nestjs-dto"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

model Participant {
  /// @ApiProperty({ description: 'Id do participante', })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Id da pessoa associada', })
  peopleId String

  /// @ApiProperty({ description: 'Nome do participante', })
  name String

  /// @ApiProperty({ description: 'Registro do participante', })
  registration Int

  /// @ApiProperty({ description: 'Data de nascimento do participante', })
  dateOfBirth DateTime?

  /// @ApiProperty({ description: 'Data de admissão do participante', })
  admissionDate DateTime?

  /// @ApiProperty({ description: 'Cargo do participante', })
  position String?

  /// @ApiProperty({ description: 'Tempo na função do participante', })
  timeInPosition String?

  /// @ApiProperty({ description: 'Data de criação do participante', })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do participante', })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção do participante', })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Id do kaizen associado', })
  kaizenId String?

  /// @DtoEntityHidden
  /// @ApiProperty({ description: 'Kaizen associado ao participante', type: KaizenEntity, })
  kaizen Kaizen? @relation(fields: [kaizenId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do registro de severidade do evento', })
  eventSeverityPeopleId String? @unique()

  /// @ApiProperty({ description: 'Registro de severidade do evento associado', type: EventSeverityPeopleEntity, })
  eventSeverityPeople EventSeverityPeople? @relation(fields: [eventSeverityPeopleId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do participante de evento associado', })
  eventParticipantId String?

  /// @ApiProperty({ description: 'Participante de evento associado', type: EventParticipantsEntity, })
  eventParticipant EventParticipants? @relation(fields: [eventParticipantId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do dono local do evento associado', })
  eventLocalOwnerId String? @unique()

  /// @ApiProperty({ description: 'Dono local do evento associado', type: EventEntity, })
  eventLocalOwner Event? @relation(fields: [eventLocalOwnerId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do dono de informação adicional do evento', })
  eventAdditionalInformationOwnerId String? @unique()

  /// @ApiProperty({ description: 'Dono de informação adicional do evento associado', type: EventAdditionalInformationEntity, })
  eventAdditionalInformationOwner EventAdditionalInformation? @relation(fields: [eventAdditionalInformationOwnerId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do responsável pela ação do plano do evento', })
  eventActionPlanOwnerId String? @unique()

  /// @ApiProperty({ description: 'Responsável pela ação do plano do evento associado', type: EventActionPlanEntity, })
  eventActionPlanOwner EventActionPlan? @relation(name: "eventActionPlanOwnerParticipant", fields: [eventActionPlanOwnerId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do criador da ação do plano do evento', })
  eventActionPlanCreatedById String? @unique()

  /// @ApiProperty({ description: 'Criador da ação do plano do evento associado', type: EventActionPlanEntity, })
  eventActionPlanCreatedBy EventActionPlan? @relation(name: "eventActionPlanCreatedByParticipant", fields: [eventActionPlanCreatedById], references: [id], onDelete: Cascade)
}

model KaizenReason {
  /// @ApiProperty({ description: 'Id da razão do kaizen', })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Nome da razão do kaizen', })
  name String

  /// @ApiProperty({ description: 'Resultado da razão do kaizen', })
  results String

  /// @ApiProperty({ description: 'Data de criação da razão do kaizen', })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização da razão do kaizen', required: false, })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção da razão do kaizen', required: false, })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Id do kaizen associado', required: false, })
  kaizenId String?

  /// @ApiProperty({ description: 'Kaizen associado ao motivo', required: false, type: KaizenEntity })
  kaizen Kaizen? @relation(fields: [kaizenId], references: [id], onDelete: Cascade)
}

model KaizenDescription {
  /// @ApiProperty({ description: 'Id da descrição detalhada do kaizen', })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Descrição detalhada do kaizen', })
  description String

  /// @ApiProperty({ description: 'Data de criação da descrição detalhada do kaizen', })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização da descrição detalhada do kaizen', required: false, })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção da descrição detalhada do kaizen', required: false, })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Fotos associadas à descrição detalhada', type: [ImageEntity], required: false, })
  photos Image[] @relation(name: "kaizenDescriptionPhoto")

  /// @ApiProperty({ description: 'Anexos associados à descrição detalhada', type: [ImageEntity], required: false, })
  attachments Image[] @relation(name: "kaizenDescriptionAttachment")

  /// @ApiProperty({ description: 'Id do kaizen associado à descrição detalhada', required: false, })
  kaizenId String? @unique

  /// @ApiProperty({ description: 'Kaizen associado à descrição detalhada', type: KaizenEntity, required: false, })
  kaizen Kaizen? @relation(fields: [kaizenId], references: [id], onDelete: Cascade)
}

model Kaizen {
  /// @ApiProperty({ description: 'Id do kaizen', })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Região do kaizen', })
  regional String

  /// @ApiProperty({ description: 'Código regional do kaizen', required: false, })
  regionalCode String?

  /// @ApiProperty({ description: 'Número da OS', })
  osNumber Int

  /// @ApiProperty({ description: 'Identificador único do kaizen', required: false, })
  identifier String? @unique

  /// @ApiProperty({ description: 'Data do kaizen', })
  date String

  /// @ApiProperty({ description: 'Cliente associado ao kaizen', })
  client String

  /// @ApiProperty({ description: 'Código do cliente', required: false, })
  clientCode String?

  /// @ApiProperty({ description: 'Pessoa padrinho do kaizen', required: false, })
  godfather People? @relation("godfather", fields: [godfatherId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id do padrinho', required: false, })
  godfatherId String?

  /// @ApiProperty({ description: 'Tipo do kaizen', required: false, })
  type String?

  /// @ApiProperty({ description: 'Título do kaizen', required: false, })
  title String?

  /// @ApiProperty({ description: 'Categoria do kaizen', required: false, })
  category String?

  /// @ApiProperty({ description: 'Descrição geral do kaizen', required: false, })
  description String?

  /// @ApiProperty({ description: 'Status do kaizen', })
  status KaizenStatus @default(NEW)

  /// @ApiProperty({ description: 'Id do criador', required: false, })
  creatorId String?

  /// @ApiProperty({ description: 'Pessoa criadora do kaizen', required: false, })
  creator People? @relation("kaizenCreator", fields: [creatorId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Data de criação do kaizen', })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do kaizen', required: false, })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção do kaizen', required: false, })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Notas do aprovador', required: false, })
  approverNotes String?

  /// @ApiProperty({ description: 'Fotos associadas ao kaizen', type: [ImageEntity], required: false, })
  photos Image[]

  /// @ApiProperty({ description: 'Motivos do kaizen', type: [KaizenReasonEntity], required: false, })
  reasons KaizenReason[]

  /// @DtoEntityHidden
  /// @ApiProperty({ description: 'Participantes do kaizen', type: [ParticipantEntity], required: false, })
  participants Participant[]

  /// @ApiProperty({ description: 'Descrição detalhada do kaizen', required: false, type: KaizenDescriptionEntity })
  kaizenDescription KaizenDescription?

  /// @ApiProperty({ description: 'Registro do aprovador', required: false, })
  approverRegistration Int?

  /// @ApiProperty({ description: 'Aprovador do kaizen', required: false, type: [PeopleEntity] })
  kaizenApprover People? @relation("kaizenApprover", fields: [approverRegistration], references: [registration], onDelete: SetNull)
}

model Contact {
  /// @ApiProperty({ description: 'Id do contato' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Email do contato', required: false })
  email String? @unique

  /// @ApiProperty({ description: 'Número de Whatsapp do contato', required: false })
  whatsapp String? @unique @db.VarChar(11)

  /// @ApiProperty({ description: 'Telefone do contato', required: false })
  telephone String? @unique @db.VarChar(11)

  /// @ApiProperty({ description: 'Data de criação do contato' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do contato', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção do contato', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Pessoa associada ao contato', required: false, type: PeopleEntity })
  people People?

  @@map("contact")
}

model Address {
  /// @ApiProperty({ description: 'Id do endereço' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Nome da rua' })
  street_name String

  /// @ApiProperty({ description: 'Número', required: false })
  number String @db.VarChar(10)

  /// @ApiProperty({ description: 'Bairro' })
  neighborhood String

  /// @ApiProperty({ description: 'Complemento', required: false })
  complement String

  /// @ApiProperty({ description: 'Cidade' })
  city String

  /// @ApiProperty({ description: 'Estado' })
  state String

  /// @ApiProperty({ description: 'País' })
  country String

  /// @ApiProperty({ description: 'Código postal' })
  postal_code Int

  /// @ApiProperty({ description: 'Data de criação do endereço' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do endereço', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção do endereço', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Pessoa associada ao endereço', type: PeopleEntity, required: false })
  people People?

  @@map("address")
}

model RolePeople {
  /// @ApiProperty({ description: 'Id do RolePeopleEntity', })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Data de início da função', })
  roleInitialDate DateTime?

  /// @ApiProperty({ description: 'Data de término da função', })
  roleExpirationDate DateTime?

  /// @ApiProperty({ description: 'Data de criação do RolePeopleEntity', })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do RolePeopleEntity', })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção do RolePeopleEntity', })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Id da pessoa associada', })
  peopleId String

  /// @ApiProperty({ description: 'Pessoa associada', type: PeopleEntity, })
  people People @relation(fields: [peopleId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do role associado', })
  roleId String @db.Uuid

  /// @ApiProperty({ description: 'Role associada', type: RoleEntity, })
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model PayslipResponses {
  ///  @ApiProperty({ description: 'Id do holerite',})
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Dia de nascimento', required: false,})
  dayOfBirth Int?

  /// @ApiProperty({ description: 'Mês de nascimento', required: false,})
  monthOfBirth Int?

  /// @ApiProperty({ description: 'Ano de nascimento', required: false,})
  yearOfBirth Int?

  /// @ApiProperty({ description: 'Mês de admissão', required: false,})
  admissionMonth Int?

  /// @ApiProperty({ description: 'Ano de admissão', required: false,})
  admissionYear Int?

  /// @ApiProperty({ description: 'Últimos dígitos do CPF', required: false,})
  lastCpfDigits String?

  /// @ApiProperty({ description: 'Meio do CPF', required: false,})
  middleCpfDigits String?

  /// @ApiProperty({ description: 'Nome da mãe', required: false,})
  motherName String?

  /// @ApiProperty({ description: 'Nome do pai', required: false,})
  fatherName String?

  /// @ApiProperty({ description: 'Estado civil', required: false,})
  maritalStatus String?

  /// @ApiProperty({ description: 'Estado de nascimento', required: false,})
  stateOfBirth String?

  /// @ApiProperty({ description: 'Tem filhos?', required: false,})
  hasChildren String?

  /// @ApiProperty({ description: 'Nome dos filhos', required: false,})
  childrenName String?

  /// @ApiProperty({ description: 'Data de criação',})
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização',})
  updatedAt DateTime @updatedAt

  /// @ApiProperty({ description: 'Relacionamento com a tabela de pessoas',})
  people People @relation(fields: [peopleId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id da pessoa',})
  peopleId String @unique
}

model People {
  /// @ApiProperty({ description: 'Id da pessoa',})
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'ID do OneSignal associado à pessoa', required: false, })
  onesignalId String?

  /// @ApiProperty({ description: 'Código do projeto associado à pessoa', required: false, })
  projectCode Int?

  /// @ApiProperty({ description: 'Nome completo da pessoa',})
  full_name String @db.VarChar(250)

  /// @ApiProperty({ description: 'Centro de custo associado à pessoa', required: false, })
  costCenter String?

  /// @ApiProperty({ description: 'Código da empresa associada à pessoa', required: false, })
  companyCode Int?

  /// @ApiProperty({ description: 'Código da filial associada à pessoa', required: false, })
  branchCode Int?

  /// @ApiProperty({ description: 'Registro da pessoa',})
  registration Int @unique

  /// @ApiProperty({ description: 'Id do endereço associado à pessoa', required: false, })
  addr_id String? @unique

  /// @ApiProperty({ description: 'Id do contato associado à pessoa', required: false, })
  cont_id String? @unique

  /// @ApiProperty({ description: 'Data de criação da pessoa',})
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização da pessoa',})
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de exclusão da pessoa', required: false, })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Aceitou os termos de uso', required: false, })
  termsAccepted Boolean @default(false)

  /// @ApiProperty({ description: 'Data de nascimento da pessoa', required: false, })
  dateOfBirth DateTime?

  /// @ApiProperty({ description: 'Últimos cinco dígitos do CPF', required: false, })
  lastFiveDigitsCpf String?

  /// @ApiProperty({ description: ''Data de admissão da pessoa', required: false, })
  admissionDate DateTime?

  /// @ApiProperty({ description: 'Deposito padrão da pessoa', required: false, })
  defaultDeposit String?

  /// @ApiProperty({ description: 'Senha do recibo de material', required: false, })
  materialReceiptPassword String? @db.VarChar(250)

  /// @ApiProperty({ description: 'Indica se a pessoa tem cadastro de face', required: false, })
  hasMaterialReceiptFace Boolean? @default(false)

  /// @ApiProperty({ description: 'Indica se a pessoa tem cadastro', required: false, type: LoginEntity })
  login Login?

  /// @ApiProperty({ description: 'Grupos aos quais a pessoa pertence', required: false, type: [GroupEntity] })
  groups Group[]

  /// @ApiProperty({ description: 'Mensagens enviadas pela pessoa', required: false, type: [MessageEntity] })
  sentMessages Message[] @relation(name: "sender")

  /// @ApiProperty({ description: 'Mensagens recebidas pela pessoa', required: false, type: [MessageEntity] })
  receivedMessages Message[] @relation(name: "receiver")

  /// @ApiProperty({ description: 'Endereço associado à pessoa', required: false, type: AddressEntity })
  address Address? @relation(fields: [addr_id], references: [id])

  /// @ApiProperty({ description: 'Contato associado à pessoa', required: false, type: ContactEntity })
  contact Contact? @relation(fields: [cont_id], references: [id])

  /// @ApiProperty({ description: 'Id da imagem associada à pessoa', required: false, })
  imageId String?

  /// @ApiProperty({ description: 'Imagem associada à pessoa', required: false, type: ImageEntity })
  image Image? @relation(fields: [imageId], references: [id])

  /// @ApiProperty({ description: 'Inspeções em que a pessoa é responsável', required: false, type: [InspectionEntity] })
  inspections Inspection[] @relation("inspectionResponsible")

  /// @ApiProperty({ description: 'Inspeções em que a pessoa é criadora', required: false, type: [InspectionEntity] })
  inspectionCreator Inspection[] @relation("inspectionCreator")

  /// @ApiProperty({ description: 'Inspeções em que a pessoa é líder', required: false, type: [InspectionEntity] })
  inspectionLeader Inspection[] @relation("inspectionLeader")

  /// @ApiProperty({ description: 'Avaliações associadas à pessoa', required: false, type: [AssessmentEntity] })
  assessments Assessment[]

  /// @ApiProperty({ description: 'Avaliações em que a pessoa é responsável', required: false, type: [AssessmentEntity] })
  inspectionParticipants InspectionParticipant[]

  /// @ApiProperty({ description: 'Relatórios de erros', required: false, type: [ErrorReportEntity] })
  errorReport ErrorReport[]

  /// @ApiProperty({ description: 'Direitos de recusa que a pessoa é criador', required: false, type: [RightOfRefusalEntity] })
  rightOfRefusalCreator RightOfRefusal[] @relation("rightOfRefusalCreator")

  /// @ApiProperty({ description: 'Direitos de recusa que a pessoa é responsável', required: false, type: [RightOfRefusalEntity] })
  rightOfRefusalExecutionBy RightOfRefusal[] @relation("executionBy")

  /// @ApiProperty({ description: 'Direitos de recusa que a pessoa é planejador', required: false, type: [RightOfRefusalEntity] })
  rightOfRefusalPlanningBy RightOfRefusal[] @relation("planningBy")

  /// @ApiProperty({ description: 'Direitos de recusa que a pessoa é envolvido sesmt', required: false, type: [RightOfRefusalEntity] })
  rightOfRefusalSesmtInvolved RightOfRefusal[] @relation("sesmtInvolved")

  /// @ApiProperty({ description: 'Papéis atribuídos à pessoa', required: false, type: [RolePeopleEntity] })
  roles RolePeople[]

  /// @ApiProperty({ description: 'Eventos criados pela pessoa', required: false, type: [EventEntity] })
  events Event[] @relation("eventCreator")

  /// @ApiProperty({ description: 'Eventos em que a pessoa é líder', required: false, type: [EventEntity] })
  eventLeader Event[] @relation("eventLeader")

  /// @ApiProperty({ description: 'Planos de ação de avaliações em que a pessoa é autor', required: false, type: [AssessmentActionPlan] })
  authorActionPlan AssessmentActionPlan[] @relation(name: "AuthorRelation")

  /// @ApiProperty({ description: 'Planos de ação de avaliações em que a pessoa é responsável', required: false, type: [AssessmentActionPlan] })
  responsibleActionPlan AssessmentActionPlan[] @relation(name: "ResponsibleRelation")

  /// @ApiProperty({ description: 'Cargo da pessoa', required: false, })
  position String?

  /// @ApiProperty({ description: 'Kaizen que a pessoa é padrinho', required: false, type: [KaizenEntity] })
  kaizen Kaizen[] @relation("godfather")

  /// @ApiProperty({ description: 'Kaizen que a pessoa é criador', required: false, type: [KaizenEntity] })
  kaizenCreator Kaizen[] @relation("kaizenCreator")

  /// @ApiProperty({ description: 'Dssma que a pessoa é criador', required: false, type: [DssmaEntity] })
  dssma Dssma[] @relation("dssmaCreator")

  /// @ApiProperty({ description: 'Dssma que a pessoa é líder', required: false, type: [DssmaEntity] })
  dssmaLeader Dssma[] @relation("dssmaLeader")

  /// @ApiProperty({ description: 'Itens devolvidos', required: false, type: [CmatReturnItemDataEntity] })
  cmatReturnItemData CmatReturnItemData[]

  /// @ApiProperty({ description: 'Solicitação de item', required: false, type: [CmatRequestEntity] })
  requestEmployee CmatRequest[] @relation("requestEmployee")

  /// @ApiProperty({ description: 'Criador de solicitação de item', required: false, type: [CmatRequestEntity] })
  creator CmatRequest[] @relation("cmatRequestCreator")

  /// @ApiProperty({ description: 'Ssma vinculado', required: false, type: [SsmaEntity] })
  ssma Ssma[]

  /// @ApiProperty({ description: 'Ssma que a pessoa é criador', required: false, type: [SsmaEntity] })
  ssmaCreator Ssma[] @relation("ssmaCreator")

  /// @ApiProperty({ description: 'Ssma que a pessoa é líder', required: false, type: [SsmaEntity] })
  ssmaLeader Ssma[] @relation("ssmaLeader")

  /// @ApiProperty({ description: 'Entrega de item que a pessoa é quem recebeu o item', required: false, type: [CmatItemDeliveryEntity] })
  cmatItemDelivery CmatItemDelivery[] @relation("deliveryEmployee")

  /// @ApiProperty({ description: 'Entrega de item que a pessoa é quem criou a entrega', required: false, type: [CmatItemDeliveryEntity] })
  deliveryCreator CmatItemDelivery[] @relation("deliveryCreator")

  /// @ApiProperty({ description: 'Kaizen que a pessoa é aprovador', required: false, type: [KaizenEntity] })
  kaizenApprover Kaizen[] @relation("kaizenApprover")

  /// @ApiProperty({ description: 'Direitos de recusa que a pessoa é criador', required: false, type: [RightOfRefusalEntity] })
  rightOfRefusalLeader RightOfRefusal[] @relation("RightOfRefusalLeader")

  /// @ApiProperty({ description: 'Respostas de holerite associadas à pessoa', required: false, type: PayslipResponsesEntity })
  payslipResponses PayslipResponses?

  /// @ApiProperty({ description: 'Backup de payloads associados à pessoa', required: false, type: [PayloadBackupEntity] })
  payloadBackup PayloadBackup[]

  @@map("people")
}

model Login {
  /// @ApiProperty({ description: 'Id do login' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Número de registro único' })
  registration Int @unique

  /// @ApiProperty({ description: 'Senha (hash)', required: false })
  password String? @db.VarChar(250)

  /// @ApiProperty({ description: 'Id da pessoa associada' })
  peop_id String @unique

  /// @ApiProperty({ description: 'Data de criação' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Pessoa relacionada', type: PeopleEntity })
  person People @relation(fields: [peop_id], references: [id], onDelete: Cascade)

  @@map("login")
}

model Group {
  /// @ApiProperty({ description: 'Id do grupo' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Nome do grupo' })
  name String

  /// @ApiProperty({ description: 'Pessoas pertencentes ao grupo', required: false, type: [PeopleEntity] })
  peoples People[]

  /// @ApiProperty({ description: 'Mensagens associadas ao grupo', required: false, type: [MessageEntity] })
  messages Message[]

  /// @ApiProperty({ description: 'Data de criação' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?

  @@map("group")
}

model Permission {
  /// @ApiProperty({ description: 'Id da permissão' })
  id String @id @default(uuid()) @db.Uuid

  /// @ApiProperty({ description: 'Nome da permissão' })
  name String @unique

  /// @ApiProperty({ description: 'Nome para exibição da permissão' })
  displayName String

  /// @ApiProperty({ description: 'Data de criação' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Papéis que possuem esta permissão', type: [RoleEntity], required: false })
  roles Role[]
}

model Role {
  /// @ApiProperty({ description: 'Id do papel' })
  id String @id @default(uuid()) @db.Uuid

  /// @ApiProperty({ description: 'Nome único do papel' })
  name String @unique

  /// @ApiProperty({ description: 'Data de criação' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Permissões associadas ao papel', required: false, type: [PermissionEntity] })
  permissions Permission[]

  /// @ApiProperty({ description: 'Indica se o papel está ativo' })
  isActive Boolean @default(true)

  /// @ApiProperty({ description: 'Relações entre pessoas e papéis', required: false, type: [RolePeopleEntity] })
  rolePeople RolePeople[]
}

model Message {
  /// @ApiProperty({ description: 'Id da mensagem' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Título da mensagem' })
  title String

  /// @ApiProperty({ description: 'Corpo do texto da mensagem' })
  text String

  /// @ApiProperty({ description: 'Data de envio da mensagem' })
  senderDate String

  /// @ApiProperty({ description: 'Indica se a mensagem foi lida' })
  readed Boolean @default(false)

  /// @ApiProperty({ description: 'URL da imagem anexada', required: false })
  image String?

  /// @ApiProperty({ description: 'Grupos que receberam a mensagem', required: false, type: [GroupEntity] })
  groups Group[]

  /// @ApiProperty({ description: 'Remetente da mensagem', type: PeopleEntity })
  sender People @relation(name: "sender", fields: [sender_id], references: [id])

  /// @ApiProperty({ description: 'Id do remetente' })
  sender_id String

  /// @ApiProperty({ description: 'Destinatário da mensagem', type: PeopleEntity })
  receiver People @relation(name: "receiver", fields: [receiver_id], references: [id])

  /// @ApiProperty({ description: 'Id do destinatário' })
  receiver_id String

  /// @ApiProperty({ description: 'Data de criação', })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?

  @@map("message")
}

model Image {
  /// @ApiProperty({ description: 'Id da imagem' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Chave do arquivo' })
  filekey String @unique

  /// @ApiProperty({ description: 'Nome do arquivo', required: false })
  name String?

  /// @ApiProperty({ description: 'Tipo do arquivo', required: false })
  type String?

  /// @ApiProperty({ description: 'Tamanho do arquivo (bytes)', required: false })
  size Int?

  /// @ApiProperty({ description: 'Data de criação' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updatedAt DateTime @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Pessoas associadas à imagem', required: false, type: [PeopleEntity] })
  people People[]

  /// @ApiProperty({ description: 'Kaizen associado à imagem', required: false, type: KaizenEntity })
  kaizen   Kaizen? @relation(fields: [kaizenId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id do kaizen associado', required: false })
  kaizenId String?

  /// @ApiProperty({ description: 'Foto de descrição detalhada do kaizen', required: false, type: KaizenDescriptionEntity })
  kaizenDescriptionPhoto   KaizenDescription? @relation(name: "kaizenDescriptionPhoto", fields: [kaizenDescriptionPhotoId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id da foto de descrição detalhada do kaizen', required: false })
  kaizenDescriptionPhotoId String?

  /// @ApiProperty({ description: 'Anexo de descrição detalhada do kaizen', required: false, type: KaizenDescriptionEntity })
  kaizenDescriptionAttachment   KaizenDescription? @relation(name: "kaizenDescriptionAttachment", fields: [kaizenDescriptionAttachmentId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id do anexo de descrição detalhada do kaizen', required: false })
  kaizenDescriptionAttachmentId String?

  /// @ApiProperty({ description: 'Evento associado como anexo', required: false, type: EventEntity })
  event   Event?  @relation("eventAttachments", fields: [eventId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id do evento associado como anexo', required: false })
  eventId String?

  /// @ApiProperty({ description: 'Informação adicional do evento associada', required: false, type: EventAdditionalInformationEntity })
  eventAdditionalInformation  EventAdditionalInformation? @relation(fields: [eventAddtionalInformationId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id da informação adicional do evento associada', required: false })
  eventAddtionalInformationId String?

  /// @ApiProperty({ description: 'Participantes do evento associados', required: false, type: EventParticipantsEntity })
  eventParticipants   EventParticipants? @relation(fields: [eventParticipantsId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id do participantes do evento associado', required: false })
  eventParticipantsId String?

  /// @ApiProperty({ description: 'Plano de ação do evento associado', required: false, type: EventActionPlanEntity })
  eventActionPlan   EventActionPlan? @relation(fields: [eventActionPlanId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id do plano de ação do evento associado', required: false })
  eventActionPlanId String?

  /// @ApiProperty({ description: 'Relatórios de erro associados', required: false, type: [ErrorReportEntity] })
  errorReport ErrorReport[]

  /// @ApiProperty({ description: 'Foto de direito de recusa', required: false, type: RightOfRefusalEntity })
  rightOfRefusal   RightOfRefusal? @relation("rightOfRefusalPhotos", fields: [rightOfRefusalId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id da foto de direito de recusa', required: false })
  rightOfRefusalId String?

  /// @ApiProperty({ description: 'Foto de ações de direito de recusa', required: false, type: RightOfRefusalEntity })
  rightOfRefusalActionsPhotos   RightOfRefusal? @relation("rightOfRefusalActionsPhotos", fields: [rightOfRefusalActionsPhotosId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id da foto de ações de direito de recusa', required: false })
  rightOfRefusalActionsPhotosId String?

  /// @ApiProperty({ description: 'Avaliações associadas à imagem', required: false, type: [AssessmentEntity] })
  assessments Assessment[] @relation(name: "image")

  /// @ApiProperty({ description: 'Avaliação anexada à imagem', required: false, type: AssessmentEntity })
  assessmentAttachments   Assessment? @relation(name: "assessmentAttachments", fields: [assessmentAttachmentsId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id da avaliação anexada', required: false })
  assessmentAttachmentsId String?

  /// @ApiProperty({ description: 'Plano de ação de avaliação associado', required: false, type: [AssessmentActionPlanEntity] })
  assessmentActionPlan AssessmentActionPlan[]

  /// @ApiProperty({ description: 'Severidades de pessoas associadas via catAttachment', required: false, type: [EventSeverityPeopleEntity] })
  severityPeopleCatAttachment EventSeverityPeople[] @relation("catAttachment")

  /// @ApiProperty({ description: 'Severidades de pessoas associadas via medicalCertificate', required: false, type: [EventSeverityPeopleEntity] })
  severityPeopleMedicalCertificate EventSeverityPeople[] @relation("medicalCertificate")

  /// @ApiProperty({ description: 'Eventos associados como análise de risco sologic', required: false, type: [EventEntity] })
  riskSologicAnalysisAttachment Event[] @relation("riskSologicAnalysisAttachment")

  /// @ApiProperty({ description: 'Ssma associado à imagem', required: false, type: SsmaEntity })
  ssma   Ssma?   @relation(fields: [ssmaId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id do Ssma associado', required: false })
  ssmaId String? @unique

  /// @ApiProperty({ description: 'Dssma associado à imagem', required: false, type: DssmaEntity })
  dssma   Dssma?  @relation(fields: [dssmaId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id do Dssma associado', required: false })
  dssmaId String? @unique

  /// @ApiProperty({ description: 'Resposta anexada à imagem', required: false, type: AnswerEntity })
  answerAttachments Answer? @relation(name: "answerAttachments", fields: [answerId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id da resposta anexada', required: false })
  answerId          String?

  /// @ApiProperty({ description: 'Itens de solicitação CMAT associados', required: false, type: [CmatRequestItemEntity] })
  cmatRequestItem CmatRequestItem[]
}

enum TypeAssessment {
  NOT_APPLICABLE
  INTERDICTION
  NOTIFICATION
}

enum AssessmentActionPlanStatus {
  OVERDUE
  PROCESSING
  CLOSED
}

model AssessmentActionPlan {
  /// @ApiProperty({ description: 'Id do plano de ação de avaliação' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Id da ação', required: false })
  actionId String? @unique

  /// @ApiProperty({ description: 'Ação', required: false })
  action String?

  /// @ApiProperty({ description: 'Prazo de conclusão', required: false })
  deadline DateTime?

  /// @ApiProperty({ description: 'Data de conclusão', required: false })
  completedDate DateTime?

  /// @ApiProperty({ description: 'Status do plano de ação', required: false })
  status AssessmentActionPlanStatus?

  /// @ApiProperty({ description: 'Descrição da conclusão', required: false })
  conclusionDescription String?

  /// @ApiProperty({ description: 'Id do autor', required: false })
  authorId String?

  /// @ApiProperty({ description: 'Autor do plano de ação', required: false, type: PeopleEntity })
  author People? @relation(name: "AuthorRelation", fields: [authorId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id do responsável', required: false })
  responsibleId String?

  /// @ApiProperty({ description: 'Responsável pelo plano de ação', required: false, type: PeopleEntity })
  responsible People? @relation(name: "ResponsibleRelation", fields: [responsibleId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id da evidência', required: false })
  evidenceId String?

  /// @ApiProperty({ description: 'Evidência do plano de ação', required: false, type: ImageEntity })
  evidence Image? @relation(fields: [evidenceId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Data de criação' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Id da avaliação associada', required: false })
  assessmentId String?

  /// @ApiProperty({ description: 'Avaliação associada', required: false, type: AssessmentEntity })
  assessment Assessment? @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
}

model Assessment {
  /// @ApiProperty({ description: 'Id da avaliação' })
  id String @unique @default(uuid())

  /// @ApiProperty({ description: 'Tipo da avaliação' })
  type TypeAssessment

  /// @ApiProperty({ description: 'Descrição da avaliação', required: false })
  description String?

  /// @ApiProperty({ description: 'Prazo de conformidade', required: false })
  complianceDeadline DateTime?

  /// @ApiProperty({ description: 'Sugestão de melhoria', required: false })
  suggestion String?

  /// @ApiProperty({ description: 'Situação séria', required: false })
  seriousSituation Alternative?

  /// @ApiProperty({ description: 'Área isolada', required: false })
  isolatedArea Alternative?

  /// @ApiProperty({ description: 'Data de criação' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Latitude associada', required: false })
  lat Float?

  /// @ApiProperty({ description: 'Longitude associada', required: false })
  lng Float?

  /// @ApiProperty({ description: 'Id da imagem associada', required: false })
  imageId String?

  /// @ApiProperty({ description: 'Imagem associada', required: false, type: ImageEntity })
  image Image? @relation(name: "image", fields: [imageId], references: [id])

  /// @ApiProperty({ description: 'Id do responsável', required: false })
  responsibleId String?

  /// @ApiProperty({ description: 'Pessoa responsável', required: false, type: PeopleEntity })
  responsible People? @relation(fields: [responsibleId], references: [id])

  /// @ApiProperty({ description: 'Teve ação imediata?', required: false })
  hadImmediateAction Boolean?

  /// @ApiProperty({ description: 'Respostas da avaliação', required: false, type: [AnswerEntity] })
  answers Answer[]

  /// @ApiProperty({ description: 'Planos de ação da avaliação', required: false, type: [AssessmentActionPlanEntity] })
  actionPlans AssessmentActionPlan[]

  /// @ApiProperty({ description: 'Imagens anexadas à avaliação', required: false, type: [ImageEntity] })
  attachments Image[] @relation(name: "assessmentAttachments")
}

model InspectionType {
  /// @ApiProperty({ description: 'Id do tipo de inspeção' })
  id String @unique @default(uuid())

  /// @ApiProperty({ description: 'Nome do tipo de inspeção', required: false })
  name String?

  /// @ApiProperty({ description: 'Indica se o tipo de inspeção está ativo' })
  active Boolean @default(true)

  /// @ApiProperty({ description: 'Data de criação do tipo de inspeção' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do tipo de inspeção', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica do tipo de inspeção', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Perguntas associadas ao tipo de inspeção', required: false, type: [QuestionEntity] })
  questions Question[]

  /// @ApiProperty({ description: 'Inspeções associadas ao tipo de inspeção', required: false, type: [InspectionEntity] })
  inspections Inspection[]
}

model Question {
  /// @ApiProperty({ description: 'Id da pergunta' })
  id String @unique @default(uuid())

  /// @ApiProperty({ description: 'Tipo da pergunta', required: false })
  type String?

  /// @ApiProperty({ description: 'Enunciado da pergunta' })
  statement String

  /// @ApiProperty({ description: 'Indica se a pergunta está ativa' })
  active Boolean

  /// @ApiProperty({ description: 'Indica se a resposta é obrigatória' })
  required Boolean @default(false)

  /// @ApiProperty({ description: 'Indica se observação é obrigatória' })
  observationRequired Boolean @default(false)

  /// @ApiProperty({ description: 'Indica se anexo é obrigatório' })
  attchmentRequired Boolean @default(false)

  /// @ApiProperty({ description: 'Sequência da pergunta', required: false })
  sequence Int?

  /// @ApiProperty({ description: 'Data de criação' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Id do tipo de inspeção' })
  inspectionTypeId String

  /// @ApiProperty({ description: 'Tipo de inspeção associado', type: InspectionTypeEntity })
  inspectionType InspectionType @relation(fields: [inspectionTypeId], references: [id])

  /// @ApiProperty({ description: 'Respostas associadas à pergunta', required: false, type: [AnswerEntity] })
  answers Answer[]
}

enum Alternative {
  YES
  NO
  NOT_APPLICABLE
}

model Answer {
  /// @ApiProperty({ description: 'Id da resposta' })
  id String @unique @default(uuid())

  /// @ApiProperty({ description: 'Alternativa selecionada', required: false })
  alternativeSelected Alternative?

  /// @ApiProperty({ description: 'Observação da resposta', required: false })
  observation String?

  /// @ApiProperty({ description: 'Data de criação' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Anexos da resposta', required: false, type: [ImageEntity] })
  attachments Image[] @relation(name: "answerAttachments")

  /// @ApiProperty({ description: 'Id da pergunta associada' })
  questionId String

  /// @ApiProperty({ description: 'Pergunta associada', type: QuestionEntity })
  question Question @relation(fields: [questionId], references: [id])

  /// @ApiProperty({ description: 'Id da avaliação associada', required: false })
  assessmentId String?

  /// @ApiProperty({ description: 'Avaliação associada', required: false, type: AssessmentEntity })
  assessment Assessment? @relation(fields: [assessmentId], references: [id])

  /// @ApiProperty({ description: 'Id da inspeção associada', required: false })
  inspectionId String?

  /// @ApiProperty({ description: 'Inspeção associada', required: false, type: InspectionEntity })
  inspection Inspection? @relation(fields: [inspectionId], references: [id])
}

enum InspectionNature {
  PLANNED
  OPPORTUNITY
}

model Inspection {
  /// @ApiProperty({ description: 'Id da inspeção' })
  id String @unique @default(uuid())

  /// @ApiProperty({ description: 'Id do criador', required: false })
  creatorId String?

  /// @ApiProperty({ description: 'Criador da inspeção', required: false, type: PeopleEntity })
  creator People? @relation("inspectionCreator", fields: [creatorId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id do líder', required: false })
  leaderId String?

  /// @ApiProperty({ description: 'Líder da inspeção', required: false, type: PeopleEntity })
  leader People? @relation("inspectionLeader", fields: [leaderId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Chave da inspeção' })
  key String @unique

  /// @ApiProperty({ description: 'Local da inspeção' })
  local String

  /// @ApiProperty({ description: 'Número da OS' })
  osNumber Int

  /// @ApiProperty({ description: 'Filial da inspeção' })
  branch String

  /// @ApiProperty({ description: 'Data de criação' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Natureza da inspeção', required: false })
  inspectionNature InspectionNature?

  /// @ApiProperty({ description: 'Latitude associada', required: false })
  lat Float?

  /// @ApiProperty({ description: 'Longitude associada', required: false })
  lng Float?

  /// @ApiProperty({ description: 'Cliente associado', required: false })
  client String?

  /// @ApiProperty({ description: 'Id do tipo de inspeção' })
  inspectionTypeId String

  /// @ApiProperty({ description: 'Tipo de inspeção associado', type: InspectionTypeEntity })
  inspectionType InspectionType @relation(fields: [inspectionTypeId], references: [id])

  /// @ApiProperty({ description: 'Id do responsável' })
  responsibleId String

  /// @ApiProperty({ description: 'Pessoa responsável pela inspeção', type: PeopleEntity })
  responsible People @relation("inspectionResponsible", fields: [responsibleId], references: [id])

  /// @ApiProperty({ description: 'Respostas da inspeção', required: false, type: [AnswerEntity] })
  answers Answer[]

  /// @ApiProperty({ description: 'Participantes da inspeção', required: false, type: [InspectionParticipantEntity] })
  participants InspectionParticipant[]

  /// @ApiProperty({ description: 'Data de ocorrência', required: false })
  occurredAt DateTime?
}

model InspectionParticipant {
  /// @ApiProperty({ description: 'Id da inspeção' })
  inspectionId String

  /// @ApiProperty({ description: 'Inspeção associada', type: InspectionEntity })
  inspection Inspection @relation(fields: [inspectionId], references: [id])

  /// @ApiProperty({ description: 'Id da pessoa' })
  peopleId String

  /// @ApiProperty({ description: 'Pessoa associada', type: PeopleEntity })
  people People @relation(fields: [peopleId], references: [id])

  @@id([inspectionId, peopleId])
  @@map("inspection_participants")
}

model Terms {
  /// @ApiProperty({ description: 'Id dos termos' })
  id String @unique @default(uuid())

  /// @ApiProperty({ description: 'Descrição dos termos' })
  description String

  /// @ApiProperty({ description: 'Data de criação dos termos' })
  created_at DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização dos termos', required: false })
  updated_at DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica dos termos', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Direitos de recusa vinculados', required: false, type: [RightOfRefusalEntity] })
  rightOfRefusal RightOfRefusal[]
}

enum EventType {
  PERSONAL
  ENVIRONMENTAL
  MATERIAL
}

enum EventStatus {
  PENDING
  PROCESSING
  ACTIONS_IN_PROCESS
  INVALID
  DONE
  REOPENED
}

enum SeverityAssessmentCategoryType {
  UNSAFE_CONDITIONS
  UNSAFE_BEHAVIOR
}

enum EventAnalysisProgress {
  NOT_STARTED
  GENERAL
  CLASSIFICATION
  SEVERITY
  QUIZ
  ADDITIONAL
  PARTICIPANTS
  RISK
  ACTION_PLAN
  FINISHED
}

model Event {
  /// @ApiProperty({ description: 'Id do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Tipo do evento' })
  type EventType

  /// @ApiProperty({ description: 'Data de ocorrência do evento', required: false })
  occurredAt DateTime?

  /// @ApiProperty({ description: 'Descrição do evento', required: false })
  description String?

  /// @ApiProperty({ description: 'Região do evento', required: false })
  regional String?

  /// @ApiProperty({ description: 'Número da OS', required: false })
  osNumber Int?

  /// @ApiProperty({ description: 'Cliente associado ao evento', required: false })
  client String?

  /// @ApiProperty({ description: 'Anexos do evento', required: false, type: [ImageEntity] })
  attachments Image[] @relation("eventAttachments")

  /// @ApiProperty({ description: 'Data de criação do evento' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do evento', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção do evento', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Status do evento' })
  status EventStatus @default(PENDING)

  /// @ApiProperty({ description: 'Progresso da análise do evento' })
  analysisProgress EventAnalysisProgress @default(NOT_STARTED)

  /// @ApiProperty({ description: 'Data de conclusão da análise', required: false })
  analysisCompletionDate DateTime?

  /// @ApiProperty({ description: 'Id do criador do evento', required: false })
  creatorId String?

  /// @ApiProperty({ description: 'Criador do evento', required: false, type: PeopleEntity })
  creator People? @relation("eventCreator", fields: [creatorId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id do líder do evento', required: false })
  leaderId String?

  /// @ApiProperty({ description: 'Líder do evento', required: false, type: PeopleEntity })
  leader People? @relation("eventLeader", fields: [leaderId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Latitude do evento', required: false })
  lat Float?

  /// @ApiProperty({ description: 'Longitude do evento', required: false })
  lng Float?

  /// @ApiProperty({ description: 'Proprietário local do evento', required: false, type: ParticipantEntity })
  localOwner Participant?

  /// @ApiProperty({ description: 'Descrição local do evento', required: false })
  localDescription String?

  /// @ApiProperty({ description: 'Tipo de serviço', required: false })
  serviceType String?

  /// @ApiProperty({ description: 'Categoria de atividade', required: false })
  activityCategory String?

  /// @ApiProperty({ description: 'Atividade crítica', required: false })
  criticalActivity String?

  /// @ApiProperty({ description: 'Severidade real', required: false })
  realSeverity String?

  /// @ApiProperty({ description: 'Severidade potencial', required: false })
  potentialSeverity String?

  /// @ApiProperty({ description: 'Classificação do evento', required: false })
  classification String?

  /// @ApiProperty({ description: 'Identificador único do evento' })
  identifier String @unique()

  /// @ApiProperty({ description: 'Descrição de perdas', required: false })
  lossDescription String?

  /// @ApiProperty({ description: 'Descrição de atividades planejadas', required: false })
  plannedActivityDescription String?

  /// @ApiProperty({ description: 'Tipo de análise', required: false })
  typeOfAnalysis String?

  /// @ApiProperty({ description: 'Tipo de atividade', required: false })
  activityType String?

  /// @ApiProperty({ description: 'Classificação detalhada do evento', required: false, type: EventClassificationEntity })
  eventClassification EventClassification?

  /// @ApiProperty({ description: 'Categorização do evento', required: false, type: EventCategorizationEntity })
  eventCategorization EventCategorization?

  /// @ApiProperty({ description: 'Quiz do evento', required: false, type: [EventQuizEntity] })
  quiz EventQuiz[]

  /// @ApiProperty({ description: 'Fatos do evento', required: false, type: [EventFactEntity] })
  facts EventFact[]

  /// @ApiProperty({ description: 'Severidade do evento', required: false, type: EventSeverityEntity })
  severity EventSeverity?

  /// @ApiProperty({ description: 'Pessoas com severidade no evento', required: false, type: [EventSeverityPeopleEntity] })
  severityPeople EventSeverityPeople[]

  /// @ApiProperty({ description: 'Participantes do evento', required: false, type: EventParticipantsEntity })
  participants EventParticipants?

  /// @ApiProperty({ description: 'Informações adicionais do evento', required: false, type: EventAdditionalInformationEntity })
  additionalInformation EventAdditionalInformation?

  /// @ApiProperty({ description: 'Tipo de análise de risco', required: false })
  riskAnalysisType String?

  /// @ApiProperty({ description: 'Id do sologic de risco', required: false })
  riskSologicId String?

  /// @ApiProperty({ description: 'Anexo de análise de risco sologic', required: false, type: ImageEntity })
  riskSologicAnalysisAttachment Image? @relation("riskSologicAnalysisAttachment", fields: [riskSologicAnalysisAttachmentId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id do anexo de análise de risco sologic', required: false })
  riskSologicAnalysisAttachmentId String?

  /// @ApiProperty({ description: 'Riscos associados ao evento', required: false, type: [EventRiskEntity] })
  risks EventRisk[]

  /// @ApiProperty({ description: 'Causas de riscos do evento', required: false, type: [EventRiskCauseEntity] })
  causes EventRiskCause[]

  /// @ApiProperty({ description: 'Planos de ação do evento', required: false, type: [EventActionPlanEntity] })
  actionPlans EventActionPlan[]
}

model EventClassification {
  /// @ApiProperty({ description: 'Id da classificação do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Severidade real pessoal', required: false })
  personalRealSeverity String?

  /// @ApiProperty({ description: 'Severidade potencial pessoal', required: false })
  personalPotentialSeverity String?

  /// @ApiProperty({ description: 'Frequência pessoal', required: false })
  personalFrequency String?

  /// @ApiProperty({ description: 'Severidade real ambiental', required: false })
  environmentalRealSeverity String?

  /// @ApiProperty({ description: 'Severidade potencial ambiental', required: false })
  environmentalPotentialSeverity String?

  /// @ApiProperty({ description: 'Frequência ambiental', required: false })
  environmentalFrequency String?

  /// @ApiProperty({ description: 'Severidade real material', required: false })
  materialRealSeverity String?

  /// @ApiProperty({ description: 'Severidade potencial material', required: false })
  materialPotentialSeverity String?

  /// @ApiProperty({ description: 'Frequência material', required: false })
  materialFrequency String?

  /// @ApiProperty({ description: 'Severidade real social', required: false })
  socialRealSeverity String?

  /// @ApiProperty({ description: 'Severidade potencial social', required: false })
  socialPotentialSeverity String?

  /// @ApiProperty({ description: 'Frequência social', required: false })
  socialFrequency String?

  /// @ApiProperty({ description: 'Perdas ambientais', required: false })
  environmentalLoss String?

  /// @ApiProperty({ description: 'Perdas de segurança', required: false })
  safetyLoss String?

  /// @ApiProperty({ description: 'Id do evento' })
  eventId String @unique

  /// @ApiProperty({ description: 'Evento associado', type: EventEntity })
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventSeverity {
  /// @ApiProperty({ description: 'Id da severidade do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Indica se houve pessoa ferida', required: false })
  personInjured Boolean?

  /// @ApiProperty({ description: 'Quantidade de pessoas feridas', required: false })
  personInjuredCount Int?

  /// @ApiProperty({ description: 'Indica se houve fatalidade de pessoa', required: false })
  personFatality Boolean?

  /// @ApiProperty({ description: 'Indica impacto sobre pessoas', required: false })
  personImpact Boolean?

  /// @ApiProperty({ description: 'Indica se o ambiente foi impactado', required: false })
  environmentImpacted Boolean?

  /// @ApiProperty({ description: 'Indica se pode impactar o ambiente', required: false })
  environmentCanImpact Boolean?

  /// @ApiProperty({ description: 'Indica perda material', required: false })
  materialLoss Boolean?

  /// @ApiProperty({ description: 'Indica se equipamento foi envolvido', required: false })
  materialEquipmentInvolved Boolean?

  /// @ApiProperty({ description: 'Indica potencial de perda material', required: false })
  materialPotentialLoss Boolean?

  /// @ApiProperty({ description: 'Indica reconhecimento de comportamento seguro', required: false })
  safeBehaviorRecognition Boolean?

  /// @ApiProperty({ description: 'Id do evento' })
  eventId String @unique

  /// @ApiProperty({ description: 'Evento associado', type: EventEntity })
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventFact {
  /// @ApiProperty({ description: 'Id do fato do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Data de ocorrência do fato do evento', required: false })
  occurredAt DateTime?

  /// @ApiProperty({ description: 'Descrição do fato do evento', required: false })
  description String?

  /// @ApiProperty({ description: 'Id do evento' })
  eventId String

  /// @ApiProperty({ description: 'Evento associado', type: EventEntity })
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventSeverityPeople {
  /// @ApiProperty({ description: 'Id do registro de severidade de pessoas em eventos' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Descrição da situação', required: false })
  situation String?

  /// @ApiProperty({ description: 'Indica se houve atendimento médico', required: false })
  medicalAttention Boolean?

  /// @ApiProperty({ description: 'Data de nascimento da pessoa', required: false })
  birthDate String?

  /// @ApiProperty({ description: 'Data de emissão do documento', required: false })
  documentIssuedDate String?

  /// @ApiProperty({ description: 'Tempo na função', required: false })
  timeInFunction String?

  /// @ApiProperty({ description: 'Consequências observadas', required: false })
  consequences String?

  /// @ApiProperty({ description: 'Indica se houve fatalidade', required: false })
  fatality Boolean?

  /// @ApiProperty({ description: 'Participante associado', required: false, type: ParticipantEntity })
  participant Participant?

  /// @ApiProperty({ description: 'Id do evento' })
  eventId String

  /// @ApiProperty({ description: 'Evento associado', type: EventEntity })
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Tipo de acidente', required: false })
  accidentType String?

  /// @ApiProperty({ description: 'Tipo de lesão', required: false })
  injuryType String?

  /// @ApiProperty({ description: 'Parte do corpo lesionada', required: false })
  bodyPart String?

  /// @ApiProperty({ description: 'Lado do corpo lesionado', required: false })
  bodySide String?

  /// @ApiProperty({ description: 'CAF/SaF relacionado', required: false })
  cafSaf String?

  /// @ApiProperty({ description: 'Detalhes adicionais', required: false })
  detail String?

  /// @ApiProperty({ description: 'Área afetada', required: false })
  area String?

  /// @ApiProperty({ description: 'Dias perdidos', required: false })
  lostDays String?

  /// @ApiProperty({ description: 'CID', required: false })
  cid String?

  /// @ApiProperty({ description: 'Descrição da lesão', required: false })
  injuryDescription String?

  /// @ApiProperty({ description: 'Relação de trabalho', required: false })
  workRelation String?

  /// @ApiProperty({ description: 'Número do CAT', required: false })
  catNumber String?

  /// @ApiProperty({ description: 'Anexo de CAT', required: false, type: ImageEntity })
  catAttachment Image? @relation("catAttachment", fields: [catAttachmentId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id do anexo de CAT', required: false })
  catAttachmentId String?

  /// @ApiProperty({ description: 'Atestado médico (imagem)', required: false, type: ImageEntity })
  medicalCertificate Image? @relation("medicalCertificate", fields: [medicalCertificateId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id do atestado médico', required: false })
  medicalCertificateId String?
}

model EventQuiz {
  /// @ApiProperty({ description: 'Id do quiz do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Pergunta do quiz', required: false })
  question String?

  /// @ApiProperty({ description: 'Resposta do quiz (verdadeiro ou falso)', required: false })
  answer Boolean?

  /// @ApiProperty({ description: 'Id do evento' })
  eventId String

  /// @ApiProperty({ description: 'Evento relacionado', type: EventEntity })
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventAdditionalInformation {
  /// @ApiProperty({ description: 'Id da informação adicional do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Indica se a atividade no trabalho ocorreu', required: false })
  occurredAtWork Boolean?

  /// @ApiProperty({ description: 'Indica se a atividade foi controlada', required: false })
  controlledActivity Boolean?

  /// @ApiProperty({ description: 'Atividade crítica realizada', required: false })
  criticalActivity String?

  /// @ApiProperty({ description: 'Indica se houve ação imediata', required: false })
  hadImmediateAction Boolean?

  /// @ApiProperty({ description: 'Data de ocorrência da informação adicional', required: false })
  occurredAt String? @db.VarChar(25)

  /// @ApiProperty({ description: 'Dono da informação adicional do evento', required: false, type: ParticipantEntity })
  owner Participant?

  /// @ApiProperty({ description: 'Descrição da informação adicional', required: false })
  description String?

  /// @ApiProperty({ description: 'Anexos da informação adicional do evento', required: false, type: [ImageEntity] })
  attachments Image[]

  /// @ApiProperty({ description: 'Id do evento associado' })
  eventId String @unique

  /// @ApiProperty({ description: 'Evento associado', type: EventEntity })
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventParticipants {
  /// @ApiProperty({ description: 'Id do registro de participantes do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Tipo de participantes do evento', required: false })
  type String?

  /// @ApiProperty({ description: 'Id do evento associado' })
  eventId String @unique

  /// @ApiProperty({ description: 'Evento associado', type: EventEntity })
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Participantes do evento', required: false, type: [ParticipantEntity] })
  participants Participant[]

  /// @ApiProperty({ description: 'Anexos do evento', required: false, type: [ImageEntity] })
  attachments Image[]
}

model EventRisk {
  /// @ApiProperty({ description: 'Id do risco do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Situação do risco', required: false })
  situation String?

  /// @ApiProperty({ description: 'Indica se o risco foi mapeado', required: false })
  mapped Boolean?

  /// @ApiProperty({ description: 'Controle aplicado ao risco', required: false })
  appliedControl String?

  /// @ApiProperty({ description: 'Indica se o risco está presente ou ausente', required: false })
  presentOrAbsent String?

  /// @ApiProperty({ description: 'Desempenho associado ao risco', required: false })
  performance String?

  /// @ApiProperty({ description: 'Id do evento associado' })
  eventId String

  /// @ApiProperty({ description: 'Evento associado', type: EventEntity })
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventRiskCause {
  /// @ApiProperty({ description: 'Id da causa de risco do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Dimensão', required: false })
  dimension String?

  /// @ApiProperty({ description: 'Grupo', required: false })
  group String?

  /// @ApiProperty({ description: 'Causas', required: false })
  causes String?

  /// @ApiProperty({ description: 'Descrição da causa de risco', required: false })
  description String?

  /// @ApiProperty({ description: 'Id do evento associado' })
  eventId String

  /// @ApiProperty({ description: 'Evento associado', type: EventEntity })
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

enum EventActionPlanStatus {
  PROCESSING
  CLOSED
  DELAYED
}

model EventActionPlan {
  /// @ApiProperty({ description: 'Id do plano de ação do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Id da ação', required: false })
  actionId String? @unique

  /// @ApiProperty({ description: 'Causa do plano de ação', required: false })
  cause String?

  /// @ApiProperty({ description: 'Ações do plano de ação', required: false })
  actions String?

  /// @ApiProperty({ description: 'Prazo de conclusão', required: false })
  deadline DateTime?

  /// @ApiProperty({ description: 'Data de conclusão', required: false })
  completionDate DateTime?

  /// @ApiProperty({ description: 'Descrição do plano de ação', required: false })
  description String?

  /// @ApiProperty({ description: 'Status do plano de ação' })
  status EventActionPlanStatus @default(PROCESSING)

  /// @ApiProperty({ description: 'Responsável pelo plano de ação', required: false, type: ParticipantEntity })
  owner Participant? @relation(name: "eventActionPlanOwnerParticipant")

  /// @ApiProperty({ description: 'Criador do plano de ação', required: false, type: ParticipantEntity })
  createdBy Participant? @relation(name: "eventActionPlanCreatedByParticipant")

  /// @ApiProperty({ description: 'Id do evento associado' })
  eventId String

  /// @ApiProperty({ description: 'Evento associado', type: EventEntity })
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Comentários do plano de ação', required: false, type: [EventActionPlanCommentEntity] })
  comments EventActionPlanComment[]

  /// @ApiProperty({ description: 'Anexos do plano de ação', required: false, type: [ImageEntity] })
  attachments Image[]

  /// @ApiProperty({ description: 'Data de criação do plano de ação' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do plano de ação', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica do plano de ação', required: false })
  deleted_at DateTime?
}

enum EventActionPlanCommentType {
  COMMENT
  ANSWER
}

enum EventActionPlanCommentStatus {
  PENDING
  ANSWERED
}

model EventActionPlanComment {
  /// @ApiProperty({ description: 'Id do comentário do plano de ação do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Comentário', required: false })
  comments String?

  /// @ApiProperty({ description: 'Tipo do comentário' })
  type EventActionPlanCommentType

  /// @ApiProperty({ description: 'Status do comentário' })
  status EventActionPlanCommentStatus @default(PENDING)

  /// @ApiProperty({ description: 'Data de criação do comentário' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Id do usuário que criou o comentário', required: false })
  createdBy String?

  /// @ApiProperty({ description: 'Plano de ação associado', type: EventActionPlanEntity })
  actionPlan EventActionPlan @relation(fields: [actionPlanId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do plano de ação associado' })
  actionPlanId String
}

enum EventCategorizationType {
  UNSAFE_CONDITIONS
  UNSAFE_BEHAVIOR
}

model EventCategorization {
  /// @ApiProperty({ description: 'Id da categorização do evento' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Condição insegura', required: false })
  unsafeCondition String?

  /// @ApiProperty({ description: 'Detalhes da categorização', required: false })
  detail String?

  /// @ApiProperty({ description: 'Tipo de categorização', required: false })
  type EventCategorizationType?

  /// @ApiProperty({ description: 'Id do evento associado', required: false })
  eventId String? @unique()

  /// @ApiProperty({ description: 'Evento associado', required: false, type: EventEntity })
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model ErrorReport {
  /// @ApiProperty({ description: 'Id do relatório de erro' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Id do criador do relatório', required: false })
  creatorId String?

  /// @ApiProperty({ description: 'Criador do relatório', required: false, type: PeopleEntity })
  creator People? @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Mensagem do relatório' })
  message String

  /// @ApiProperty({ description: 'Imagem associada ao relatório', required: false, type: ImageEntity })
  image Image? @relation(fields: [imageId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id da imagem associada ao relatório', required: false })
  imageId String?

  /// @ApiProperty({ description: 'Data de criação do relatório' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do relatório', required: false })
  updatedAt DateTime @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica do relatório', required: false })
  deleted_at DateTime?

  @@map("error_report")
}

model AuditLog {
  /// @ApiProperty({ description: 'Id do log de auditoria' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Data de criação do log de auditoria' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Usuário que realizou a operação', required: false })
  createdBy String?

  /// @ApiProperty({ description: 'Nome do módulo afetado', required: false })
  moduleName String?

  /// @ApiProperty({ description: 'Operação realizada', required: false })
  operation String?

  /// @ApiProperty({ description: 'Mensagem do log de auditoria', required: false })
  message String?

  @@map("audit_log")
}

enum RightOfRefusalStatus {
  PROCESSING
  CLOSED
  DELAYED
}

enum KaizenStatus {
  NEW
  APPROVED
  DISAPPROVED
}

model RightOfRefusal {
  /// @ApiProperty({ description: 'Id do direito de recusa' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Id do criador do direito de recusa', required: false })
  creatorId String?

  /// @ApiProperty({ description: 'Criador do direito de recusa', required: false, type: PeopleEntity })
  creator People? @relation("rightOfRefusalCreator", fields: [creatorId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Título do direito de recusa', required: false })
  title String?

  /// @ApiProperty({ description: 'Tipo do direito de recusa', required: false })
  type String?

  /// @ApiProperty({ description: 'Categoria do direito de recusa' })
  category String

  /// @ApiProperty({ description: 'Data do direito de recusa' })
  date DateTime

  /// @ApiProperty({ description: 'Status do direito de recusa' })
  status RightOfRefusalStatus @default(PROCESSING)

  /// @ApiProperty({ description: 'Sugestão do direito de recusa', required: false })
  sugestion String?

  /// @ApiProperty({ description: 'Região do direito de recusa' })
  regional String

  /// @ApiProperty({ description: 'Código regional do direito de recusa', required: false })
  regionalCode String?

  /// @ApiProperty({ description: 'Número da OS do direito de recusa' })
  osNumber Int

  /// @ApiProperty({ description: 'Local ou equipamento associado ao direito de recusa' })
  locationOrEquipment String

  /// @ApiProperty({ description: 'Líder do direito de recusa', required: false, type: PeopleEntity })
  leader   People? @relation("RightOfRefusalLeader", fields: [leaderId], references: [id], onDelete: SetNull)
  /// @ApiProperty({ description: 'Id do líder do direito de recusa', required: false })
  leaderId String?

  /// @ApiProperty({ description: 'Cliente associado ao direito de recusa' })
  client String

  /// @ApiProperty({ description: 'Código do cliente', required: false })
  clientCode String?

  /// @ApiProperty({ description: 'Fotos associadas ao direito de recusa', required: false, type: [ImageEntity] })
  photos Image[] @relation("rightOfRefusalPhotos")

  /// @ApiProperty({ description: 'Fotos de ações do direito de recusa', required: false, type: [ImageEntity] })
  actionsPhotos Image[] @relation("rightOfRefusalActionsPhotos")

  /// @ApiProperty({ description: 'Categoria de risco', required: false })
  riskCategory String?

  /// @ApiProperty({ description: 'Descrição do direito de recusa', required: false })
  description String?

  /// @ApiProperty({ description: 'Justificativa do direito de recusa', required: false })
  justification String?

  /// @ApiProperty({ description: 'Termo associado', required: false, type: TermsEntity })
  term   Terms?  @relation(fields: [termId], references: [id], onDelete: SetNull)
  /// @ApiProperty({ description: 'Id do termo associado', required: false })
  termId String?

  /// @ApiProperty({ description: 'Termo aceito?', required: false })
  termAccepted Boolean?

  /// @ApiProperty({ description: 'Risco grave identificado?', required: false })
  severeRiskIdentified Boolean?

  /// @ApiProperty({ description: 'Executor do direito de recusa', required: false, type: PeopleEntity })
  executionBy   People? @relation("executionBy", fields: [executionById], references: [id], onDelete: SetNull)
  /// @ApiProperty({ description: 'Id do executor do direito de recusa', required: false })
  executionById String?

  /// @ApiProperty({ description: 'Planejador do direito de recusa', required: false, type: PeopleEntity })
  planningBy   People? @relation("planningBy", fields: [planningById], references: [id], onDelete: SetNull)
  /// @ApiProperty({ description: 'Id do planejador do direito de recusa', required: false })
  planningById String?

  /// @ApiProperty({ description: 'SESMT envolvido no direito de recusa', required: false, type: PeopleEntity })
  sesmtInvolved   People? @relation("sesmtInvolved", fields: [sesmtInvolvedId], references: [id], onDelete: SetNull)
  /// @ApiProperty({ description: 'Id do SESMT envolvido', required: false })
  sesmtInvolvedId String?

  /// @ApiProperty({ description: 'Identificador único do direito de recusa', required: false })
  identifier String? @unique

  /// @ApiProperty({ description: 'Data de criação do direito de recusa' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do direito de recusa', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção do direito de recusa', required: false })
  deleted_at DateTime?
}

enum CmatRequestItemStatusEnum {
  USING
  SOLICITED_BY_EMPLOYEE
  PENDING_SIGNATURE
  PENDING_RETURN
  DEVOLUTION_COMPLETED
  DEVOLUTION_PENDING_SIGNATURE
  EXPIRED_CHECK
  AVAILABLE
  CONSUMABLE
}

model CmatRequest {
  /// @ApiProperty({ description: 'Id da solicitação CMAT' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Empresa', required: false })
  company String?

  /// @ApiProperty({ description: 'Código da empresa', required: false })
  companyCode Int?

  /// @ApiProperty({ description: 'Data da solicitação' })
  date DateTime

  /// @ApiProperty({ description: 'Hora da solicitação' })
  time String

  /// @ApiProperty({ description: 'Depósito' })
  deposit String

  /// @ApiProperty({ description: 'Número da OS' })
  os String

  /// @ApiProperty({ description: 'Indicador de entrega', required: false })
  delivered Boolean @default(false)

  /// @ApiProperty({ description: 'Itens solicitados', required: false, type: [CmatRequestItemEntity] })
  requestItems CmatRequestItem[]

  /// @ApiProperty({ description: 'Funcionário que fez a solicitação', required: false, type: PeopleEntity })
  requestEmployee People? @relation("requestEmployee", fields: [requestEmployeeId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do funcionário que fez a solicitação', required: false })
  requestEmployeeId String?

  /// @ApiProperty({ description: 'Entrega de item CMAT associada', required: false, type: CmatItemDeliveryEntity })
  cmatItemDelivery CmatItemDelivery?

  /// @ApiProperty({ description: 'Id do criador da solicitação', required: false })
  creatorId String?

  /// @ApiProperty({ description: 'Criador da solicitação', required: false, type: PeopleEntity })
  creator People? @relation("cmatRequestCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Data de criação da solicitação' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização da solicitação', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica da solicitação', required: false })
  deleted_at DateTime?
}

model CmatItemDelivery {
  /// @ApiProperty({ description: 'Id da entrega de item CMAT' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Empresa', required: false })
  company String?

  /// @ApiProperty({ description: 'Código da empresa', required: false })
  companyCode Int?

  /// @ApiProperty({ description: 'Depósito' })
  deposit String

  /// @ApiProperty({ description: 'Número da OS' })
  os String

  /// @ApiProperty({ description: 'Indica se a entrega foi assinada', required: false })
  signed Boolean?

  /// @ApiProperty({ description: 'Itens de solicitação entregues', required: false, type: [CmatRequestItemEntity] })
  deliveryItems CmatRequestItem[]

  /// @ApiProperty({ description: 'Id do funcionário que realizou a entrega', required: false })
  deliveryEmployeeId String?

  /// @ApiProperty({ description: 'Funcionário que realizou a entrega', required: false, type: PeopleEntity })
  deliveryEmployee People? @relation("deliveryEmployee", fields: [deliveryEmployeeId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do criador da entrega', required: false })
  creatorId String?

  /// @ApiProperty({ description: 'Criador da entrega', required: false, type: PeopleEntity })
  creator People? @relation("deliveryCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id da solicitação CMAT associada', required: false })
  cmatRequestId String? @unique

  /// @ApiProperty({ description: 'Solicitação CMAT associada', required: false, type: CmatRequestEntity })
  cmatRequest CmatRequest? @relation(fields: [cmatRequestId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Data de criação da entrega' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização da entrega', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica da entrega', required: false })
  deleted_at DateTime?
}

model CmatReturnItemData {
  /// @ApiProperty({ description: 'Id do dado de devolução de item CMAT' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Data de devolução do item' })
  date DateTime

  /// @ApiProperty({ description: 'Hora da devolução do item' })
  time String

  /// @ApiProperty({ description: 'Quantidade devolvida', required: false })
  quantityReturned Int?

  /// @ApiProperty({ description: 'Detalhamento de avaria', required: false })
  breakdown String?

  /// @ApiProperty({ description: 'Indica se a devolução foi assinada' })
  signed Boolean

  /// @ApiProperty({ description: 'Tipo de devolução', required: false })
  returnType String?

  /// @ApiProperty({ description: 'Indica se devolvido pelo mesmo funcionário', required: false })
  returnedBySameEmployee Boolean?

  /// @ApiProperty({ description: 'Número da OS', required: false })
  os String?

  /// @ApiProperty({ description: 'Funcionário que realizou a devolução', required: false, type: PeopleEntity })
  returnEmployee People? @relation(fields: [returnEmployeeId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id do funcionário que realizou a devolução', required: false })
  returnEmployeeId String?

  /// @ApiProperty({ description: 'Observação da devolução', required: false })
  observation String?

  /// @ApiProperty({ description: 'Item de solicitação associado', required: false, type: CmatRequestItemEntity })
  cmatRequestItem CmatRequestItem? @relation(fields: [cmatRequestItemId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do item de solicitação associado', required: false })
  cmatRequestItemId String? @unique

  /// @ApiProperty({ description: 'Data de criação do registro' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do registro', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica do registro', required: false })
  deleted_at DateTime?
}

model CmatRequestItemReplacement {
  /// @ApiProperty({ description: 'Id da substituição de item CMAT' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Item original solicitado', type: CmatRequestItemEntity })
  originalItem CmatRequestItem @relation("OriginalItem", fields: [originalItemId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do item original' })
  originalItemId String

  /// @ApiProperty({ description: 'Item de substituição solicitado', type: CmatRequestItemEntity })
  replacementItem CmatRequestItem @relation("ReplacementItem", fields: [replacementItemId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id do item de substituição' })
  replacementItemId String

  /// @ApiProperty({ description: 'Data de criação da substituição' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização da substituição', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica da substituição', required: false })
  deleted_at DateTime?
}

model CmatRequestItem {
  /// @ApiProperty({ description: 'Id do item solicitado CMAT' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Código do item' })
  code Int

  /// @ApiProperty({ description: 'Produto' })
  product String

  /// @ApiProperty({ description: 'Unidade de medida' })
  unitMeasurement String

  /// @ApiProperty({ description: 'Quantidade em estoque', required: false })
  stock Int?

  /// @ApiProperty({ description: 'Endereço do estoque', required: false })
  address String?

  /// @ApiProperty({ description: 'Quantidade solicitada' })
  quantity Float

  /// @ApiProperty({ description: 'Centro de custo' })
  costCenter String

  /// @ApiProperty({ description: 'Patrimônio', required: false })
  patrimony String?

  /// @ApiProperty({ description: 'Herança patrimonial', required: false })
  propertyHeritage String?

  /// @ApiProperty({ description: 'Classificação', required: false })
  classification String?

  /// @ApiProperty({ description: 'Observação', required: false })
  observation String?

  /// @ApiProperty({ description: 'Saldo para devolução', required: false })
  balanceToReturned Int?

  /// @ApiProperty({ description: 'Certificado de aprovação', required: false })
  certificateOfApproval String?

  /// @ApiProperty({ description: 'Material retornável', required: false })
  returnableMaterial Boolean?

  /// @ApiProperty({ description: 'Status da solicitação' })
  status CmatRequestItemStatusEnum @default(SOLICITED_BY_EMPLOYEE)

  /// @ApiProperty({ description: 'Depósito' })
  deposit String

  /// @ApiProperty({ description: 'Descrição do depósito', required: false })
  depositDescription String?

  /// @ApiProperty({ description: 'Prazo de devolução', required: false })
  returnDeadline DateTime?

  /// @ApiProperty({ description: 'Solicitação associada', required: false, type: CmatRequestEntity })
  cmatRequest   CmatRequest? @relation(fields: [cmatRequestId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id da solicitação associada', required: false })
  cmatRequestId String?

  /// @ApiProperty({ description: 'Entrega associada', required: false, type: CmatItemDeliveryEntity })
  cmatItemDelivery   CmatItemDelivery? @relation(fields: [cmatItemDeliveryId], references: [id], onDelete: Cascade)
  /// @ApiProperty({ description: 'Id da entrega associada', required: false })
  cmatItemDeliveryId String?

  /// @ApiProperty({ description: 'Dados de devolução associados', required: false, type: CmatReturnItemDataEntity })
  cmatReturnItemData CmatReturnItemData?

  /// @ApiProperty({ description: 'Substituições originais', required: false, type: [CmatRequestItemReplacementEntity] })
  originalReplacements CmatRequestItemReplacement[] @relation("OriginalItem")

  /// @ApiProperty({ description: 'Substituições de item', required: false, type: [CmatRequestItemReplacementEntity] })
  itemReplacements CmatRequestItemReplacement[] @relation("ReplacementItem")

  /// @ApiProperty({ description: 'Imagem de assinatura', required: false, type: ImageEntity })
  signedImage   Image?  @relation(fields: [signedImageId], references: [id], onDelete: SetNull)
  /// @ApiProperty({ description: 'Id da imagem de assinatura', required: false })
  signedImageId String?

  /// @ApiProperty({ description: 'Data de criação' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
  deleted_at DateTime?
}

model Ssma {
  /// @ApiProperty({ description: 'Id do SSMA' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Identificador único do SSMA', required: false })
  identifier String? @unique

  /// @ApiProperty({ description: 'Local da reunião' })
  meetingLocation String

  /// @ApiProperty({ description: 'Data da reunião' })
  date DateTime

  /// @ApiProperty({ description: 'Hora de encerramento' })
  closingTime String

  /// @ApiProperty({ description: 'Tipo de reunião' })
  meetingType String

  /// @ApiProperty({ description: 'Tópico da reunião' })
  meetingTopic String

  /// @ApiProperty({ description: 'Anexo da reunião', required: false, type: ImageEntity })
  attachment Image?

  /// @ApiProperty({ description: 'Participantes da reunião', required: false, type: [PeopleEntity] })
  meetingParticipants People[]

  /// @ApiProperty({ description: 'Id do criador do SSMA', required: false })
  creatorId String?

  /// @ApiProperty({ description: 'Criador do SSMA', required: false, type: PeopleEntity })
  creator People? @relation("ssmaCreator", fields: [creatorId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id do líder do SSMA', required: false })
  leaderId String?

  /// @ApiProperty({ description: 'Líder do SSMA', required: false, type: PeopleEntity })
  leader People? @relation("ssmaLeader", fields: [leaderId], references: [id], onDelete: SetNull)
}

model DssmaQuestion {
  /// @ApiProperty({ description: 'Id da questão DSSMA' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Texto da questão DSSMA' })
  question String

  /// @ApiProperty({ description: 'Sequência da questão', required: false })
  sequence Int @unique

  /// @ApiProperty({ description: 'Data de criação da questão' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização da questão', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica da questão', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'Respostas vinculadas à questão DSSMA', required: false, type: [DssmaAnswersEntity] })
  dssmaAnswers DssmaAnswers[]
}

model DssmaAnswers {
  /// @ApiProperty({ description: 'Id da resposta DSSMA' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Resposta da questão DSSMA' })
  answer Boolean

  /// @ApiProperty({ description: 'Observação da resposta', required: false })
  observation String?

  /// @ApiProperty({ description: 'Pergunta vinculada', type: DssmaQuestionEntity })
  question DssmaQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id da pergunta vinculada' })
  questionId String

  /// @ApiProperty({ description: 'Data de criação da resposta DSSMA' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização da resposta DSSMA', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica da resposta DSSMA', required: false })
  deleted_at DateTime?

  /// @ApiProperty({ description: 'DSSMA associado', required: false, type: DssmaEntity })
  dssma Dssma? @relation(fields: [dssmaId], references: [id])

  /// @ApiProperty({ description: 'Id do DSSMA associado', required: false })
  dssmaId String?
}

model Dssma {
  /// @ApiProperty({ description: 'Id do DSSMA' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Identificador único do DSSMA', required: false })
  identifier String? @unique

  /// @ApiProperty({ description: 'Local da DSSMA' })
  dssmaLocation String

  /// @ApiProperty({ description: 'Número da OS' })
  osNumber Int

  /// @ApiProperty({ description: 'Data do DSSMA' })
  date DateTime

  /// @ApiProperty({ description: 'Local da reunião' })
  meetingLocation String

  /// @ApiProperty({ description: 'Envolvimento no DSSMA', required: false })
  involvement String?

  /// @ApiProperty({ description: 'Tópico do DSSMA', required: false })
  meetingTopic String?

  /// @ApiProperty({ description: 'Anexo do DSSMA', required: false, type: ImageEntity })
  attachment Image?

  /// @ApiProperty({ description: 'Respostas vinculadas ao DSSMA', required: false, type: [DssmaAnswersEntity] })
  dssmaAnswers DssmaAnswers[]

  /// @ApiProperty({ description: 'Id do criador do DSSMA', required: false })
  creatorId String?

  /// @ApiProperty({ description: 'Criador do DSSMA', required: false, type: PeopleEntity })
  creator People? @relation("dssmaCreator", fields: [creatorId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Id do líder do DSSMA', required: false })
  leaderId String?

  /// @ApiProperty({ description: 'Líder do DSSMA', required: false, type: PeopleEntity })
  leader People? @relation("dssmaLeader", fields: [leaderId], references: [id], onDelete: SetNull)

  /// @ApiProperty({ description: 'Data de criação do DSSMA' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do DSSMA', required: false })
  updatedAt DateTime? @updatedAt
}

model PayloadBackup {
  /// @ApiProperty({ description: 'Id do backup de payload' })
  id String @id @default(uuid())

  /// @ApiProperty({ description: 'Payload em formato JSON' })
  payload String

  /// @ApiProperty({ description: 'Rota acessada' })
  route String

  /// @ApiProperty({ description: 'Pessoa associada ao backup', required: false, type: PeopleEntity })
  person People? @relation(fields: [personId], references: [id], onDelete: Cascade)

  /// @ApiProperty({ description: 'Id da pessoa associada', required: false })
  personId String?

  /// @ApiProperty({ description: 'Data de criação do backup' })
  createdAt DateTime @default(now())

  /// @ApiProperty({ description: 'Data de atualização do backup', required: false })
  updatedAt DateTime? @updatedAt

  /// @ApiProperty({ description: 'Data de deleção lógica do backup', required: false })
  deleted_at DateTime?
}

// view ActionPlansView {
//   /// @ApiProperty({ description: 'Id do plano de ação' })
//   id String @id @default(uuid())

//   /// @ApiProperty({ description: 'Ação do plano', required: false })
//   action String?

//   /// @ApiProperty({ description: 'Descrição da ação', required: false })
//   actionDescription String?

//   /// @ApiProperty({ description: 'Prazo de conclusão', required: false })
//   deadline String?

//   /// @ApiProperty({ description: 'Data de conclusão', required: false })
//   completedDate String?

//   /// @ApiProperty({ description: 'Status do plano', required: false })
//   status String?

//   /// @ApiProperty({ description: 'Id do autor', required: false })
//   authorId String?

//   /// @ApiProperty({ description: 'Id do responsável', required: false })
//   responsibleId String?

//   /// @ApiProperty({ description: 'Id da evidência', required: false })
//   evidenceId String?

//   /// @ApiProperty({ description: 'Descrição do plano', required: false })
//   description String?

//   /// @ApiProperty({ description: 'Id relacionado (avaliação ou evento)', required: false })
//   relatedId String?

//   /// @ApiProperty({ description: 'Tipo da ação', required: false })
//   actionType String?

//   /// @ApiProperty({ description: 'Local associado', required: false })
//   local String?

//   /// @ApiProperty({ description: 'Tipo (ex.: avaliação ou evento)', required: false })
//   type String?

//   /// @ApiProperty({ description: 'Nome completo do responsável', required: false })
//   full_name String?

//   /// @ApiProperty({ description: 'Região associada', required: false })
//   regional String?

//   /// @ApiProperty({ description: 'Identificador único', required: false })
//   identifier String?

//   /// @ApiProperty({ description: 'Número da OS', required: false })
//   osNumber Int?

//   /// @ApiProperty({ description: 'Id da pergunta', required: false })
//   questionId String?

//   /// @ApiProperty({ description: 'Id da resposta', required: false })
//   answerId String?

//   /// @ApiProperty({ description: 'Id da avaliação', required: false })
//   assessmentId String?

//   /// @ApiProperty({ description: 'Data de criação', required: false })
//   createdAt DateTime?

//   /// @ApiProperty({ description: 'Data de atualização', required: false })
//   updatedAt DateTime?

//   /// @ApiProperty({ description: 'Data de deleção lógica', required: false })
//   deleted_at DateTime?

//   /// @ApiProperty({ description: 'Indica se há perda', required: false })
//   hasLoss Boolean?

//   /// @ApiProperty({ description: 'Tipo de inspeção', required: false })
//   inspectionType String?

//   /// @ApiProperty({ description: 'Identificador da ação', required: false })
//   actionIdentifier String?

//   /// @ApiProperty({ description: 'Cliente associado', required: false })
//   client String?
// }
