datasource db {
  provider = "postgresql"
  url      = "postgresql://johndoe:mypassword@localhost:5432/mydb?schema=public"
}

generator nestjsDto {
  provider                        = "node -r ts-node/register/transpile-only src/cli.ts"
  output                          = "../src/@generated/prisma-generator-nestjs-dto"
  outputToNestJsResourceStructure = "true"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  addExposePropertyDecorator      = "true"
  fileNamingStyle                 = "camel"
  decoratorConfigPath             = "./src/example-decorator-config.json"
}

model Product {
  /// @ApiProperty({description: "The unique identifier for the product." })
  /// @IsUUID('4', {message: 'Invalid UUID format'})
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  /// @ApiProperty({description: "The name of the product 1."})
  name        String   @db.VarChar(255)
  /// @ApiProperty({description: "A detailed description of the product."})
  description String   @db.VarChar(1024)
  /// @ApiProperty({description: "A list of image URLs or data."})
  images      Json[]   @db.Json
  /// @ApiProperty({description: "A list of tags or keywords associated with the product."})
  highlighted Boolean? @default(false)
  /// @ApiProperty({description: "The number of reviews for the product."})
  reviewCount Int?     @default(0)
  // attributes  Json?
  /// @Transform(({ value }) => value ? parseFloat(value) : null)
  /// @ApiProperty({description: "The average rating of the product."})
  score       Float?
  /// @ApiProperty({description: "The price of the product."})
  categoryId  String   @db.Uuid
  /// @ApiProperty({description: "The ID of the company that owns the product."})
  companyId   String   @db.Uuid

  /// @ApiProperty({description: "The category to which the product belongs."})
  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  category Category @relation(fields: [categoryId], references: [id])

  /// @ApiProperty({description: "The company that owns the product."})
  /// @DtoRelationRequired
  /// @DtoRelationCanConnectOnCreate
  company Company @relation(fields: [companyId], references: [id])

  /// @ApiProperty({description: "The date and time when the product was created."})
  /// @DtoEntityHidden
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  /// @ApiProperty({description: "The date and time when the product was last updated."})
  /// @DtoEntityHidden
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@map("products")
}

model Category {
  id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Product Product[]
}

model Company {
  id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Product Product[]
}
